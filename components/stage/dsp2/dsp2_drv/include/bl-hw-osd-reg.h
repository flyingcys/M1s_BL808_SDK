#ifndef BL_HW_OSD_REG_H
#define BL_HW_OSD_REG_H

#include "bl808.h"
#include "bl-hw-common.h"

enum osd_blend_reg_name {
	OBND_R_LAYER_XCONFIG,
	OBND_R_LAYER_YCONFIG,
	OBND_R_MEM_CONFIG0,
	OBND_R_MEM_CONFIG1,
	OBND_R_MEM_CONFIG2,
	OBND_R_LAYER_CONFIG0,
	OBND_R_LAYER_CONFIG1,
	OBND_R_LAYER_CONFIG2,
	OBND_R_LAYER_CONFIG3,
	OBND_R_LAYER_CONFIG4,
	OBND_R_LAYER_CONFIG5,
	OBND_R_LAYER_CONFIG6,
	OBND_R_LAYER_CONFIG7,
	OBND_R_ERROR,
	OBND_R_SH,
	OBND_REG_CNT,
};

static struct bl_reg osd_blend_regs[OBND_REG_CNT] = {
	{0x0000, "OBND_LAYER_XCONFIG"},
	{0x0004, "OBND_LAYER_YCONFIG"},
	{0x0008, "OBND_MEM_CONFIG0"},
	{0x000C, "OBND_MEM_CONFIG1"},
	{0x0010, "OBND_MEM_CONFIG2"},
	{0x0014, "OBND_LAYER_CONFIG0"},
	{0x0018, "OBND_LAYER_CONFIG1"},
	{0x001C, "OBND_LAYER_CONFIG2"},
	{0x0020, "OBND_LAYER_CONFIG3"},
	{0x0024, "OBND_LAYER_CONFIG4"},
	{0x0028, "OBND_LAYER_CONFIG5"},
	{0x002C, "OBND_LAYER_CONFIG6"},
	{0x0030, "OBND_LAYER_CONFIG7"},
	{0x0040, "OBND_ERROR"},
	{0x0044, "OBND_SH"},
};

enum osd_blend_field_name {
	OBND_F_XMAX,
	OBND_F_XMIN,
	OBND_F_YMAX,
	OBND_F_YMIN,
	OBND_F_LAYER_EN,
	OBND_F_MEM_ADDR,
	OBND_F_MEM_DW_CNT,
	OBND_F_GLOBAL_A,
	OBND_F_GLOBAL_A_EN,
	OBND_F_ORDER_BU,
	OBND_F_ORDER_GY,
	OBND_F_ORDER_RV,
	OBND_F_ORDER_A,
	OBND_F_COLOR_FORMAT,
	OBND_F_GLOBAL_BU,
	OBND_F_GLOBAL_GY,
	OBND_F_GLOBAL_RV,
	OBND_F_GLOBAL_COLOR_EN,
	OBND_F_KEY_REPLACE_INDEX,
	OBND_F_KEY_INDEX_MAX,
	OBND_F_KEY_INDEX_MIN,
	OBND_F_KEY_INDEX_INV,
	OBND_F_KEY_PALETTE_EN,
	OBND_F_KEY_RV_MAX,
	OBND_F_KEY_RV_MIN,
	OBND_F_KEY_A_MAX,
	OBND_F_KEY_A_MIN,
	OBND_F_KEY_BU_MAX,
	OBND_F_KEY_BU_MIN,
	OBND_F_KEY_GY_MAX,
	OBND_F_KEY_GY_MIN,
	OBND_F_KEY_REPLACE_BU,
	OBND_F_KEY_REPLACE_GY,
	OBND_F_KEY_REPLACE_RV,
	OBND_F_KEY_REPLACE_A,
	OBND_F_UPDATE_INDEX,
	OBND_F_UPDATE_TRIGGER,
	OBND_F_KEY_BU_INV,
	OBND_F_KEY_GY_INV,
	OBND_F_KEY_RV_INV,
	OBND_F_KEY_A_INV,
	OBND_F_KEY_COLOR_EN,
	OBND_F_UPDATE_COLOR,
	OBND_F_STS_RFIFO_DRAIN_R,
	OBND_F_REG_RFIFO_DRAIN_CLR_W,
	OBND_F_LAYER_MEM_REQ_LINE,
	OBND_FIELD_CNT,
};

static struct bl_field osd_blend_fields[OBND_FIELD_CNT] = {
	/* field_name, start_bit, bit_width, type, default_value */
	{"OBND_XMAX", 16, 11, RW, 0},
	{"OBND_XMIN", 0, 11, RW, 0},
	{"OBND_YMAX", 16, 11, RW, 0},
	{"OBND_YMIN", 0, 11, RW, 0},
	{"OBND_LAYER_EN", 15, 1, RW, 0},
	{"OBND_MEM_ADDR", 0, 32, RW, 0},
	{"OBND_MEM_DW_CNT", 0, 32, RW, 0},
	{"OBND_GLOBAL_A", 24, 8, RW, 0},
	{"OBND_GLOBAL_A_EN", 16, 1, RW, 0},
	{"OBND_ORDER_BU", 14, 2, RW, 0},
	{"OBND_ORDER_GY", 12, 2, RW, 0},
	{"OBND_ORDER_RV", 10, 2, RW, 0},
	{"OBND_ORDER_A", 8, 2, RW, 0},
	{"OBND_COLOR_FORMAT", 0, 5, RW, 0},
	{"OBND_GLOBAL_BU", 24, 8, RW, 0},
	{"OBND_GLOBAL_GY", 16, 8, RW, 0},
	{"OBND_GLOBAL_RV", 8, 8, RW, 0},
	{"OBND_GLOBAL_COLOR_EN", 0, 1, RW, 0},
	{"OBND_KEY_REPLACE_INDEX", 24, 8, RW, 0},
	{"OBND_KEY_INDEX_MAX", 16, 8, RW, 0},
	{"OBND_KEY_INDEX_MIN", 8, 8, RW, 0},
	{"OBND_KEY_INDEX_INV", 1, 1, RW, 0},
	{"OBND_KEY_PALETTE_EN", 0, 1, RW, 0},
	{"OBND_KEY_RV_MAX", 24, 8, RW, 0},
	{"OBND_KEY_RV_MIN", 16, 8, RW, 0},
	{"OBND_KEY_A_MAX", 8, 8, RW, 0},
	{"OBND_KEY_A_MIN", 0, 8, RW, 0},
	{"OBND_KEY_BU_MAX", 24, 8, RW, 0},
	{"OBND_KEY_BU_MIN", 16, 8, RW, 0},
	{"OBND_KEY_GY_MAX", 8, 8, RW, 0},
	{"OBND_KEY_GY_MIN", 0, 8, RW, 0},
	{"OBND_KEY_REPLACE_BU", 24, 8, RW, 0},
	{"OBND_KEY_REPLACE_GY", 16, 8, RW, 0},
	{"OBND_KEY_REPLACE_RV", 8, 8, RW, 0},
	{"OBND_KEY_REPLACE_A", 0, 8, RW, 0},
	{"OBND_UPDATE_INDEX", 8, 8, RW, 0},
	{"OBND_UPDATE_TRIGGER", 5, 1, RW, 0},
	{"OBND_KEY_BU_INV", 4, 1, RW, 0},
	{"OBND_KEY_GY_INV", 3, 1, RW, 0},
	{"OBND_KEY_RV_INV", 2, 1, RW, 0},
	{"OBND_KEY_A_INV", 1, 1, RW, 0},
	{"OBND_KEY_COLOR_EN", 0, 1, RW, 0},
	{"OBND_UPDATE_COLOR", 0, 32, RW, 0},
	{"OBND_F_STS_RFIFO_DRAIN_R", 16, 1, RO, 0},
	{"OBND_REG_RFIFO_DRAIN_CLR_W", 0, 1, W1P, 0},
	{"OBND_LAYER_MEM_REQ_LINE", 0, 32, RW, 0x1000},
};

enum osd_draw_reg_name {
	DRAW_R_PARTIAL_CONFIG,
	DRAW_R_PARTIAL_YUV_CONFIG0,
	DRAW_R_PARTIAL_X_CONFIG0,
	DRAW_R_PARTIAL_Y_CONFIG0,
	DRAW_R_PARTIAL_YUV_CONFIG1,
	DRAW_R_PARTIAL_X_CONFIG1,
	DRAW_R_PARTIAL_Y_CONFIG1,
	DRAW_R_PARTIAL_YUV_CONFIG2,
	DRAW_R_PARTIAL_X_CONFIG2,
	DRAW_R_PARTIAL_Y_CONFIG2,
	DRAW_R_PARTIAL_YUV_CONFIG3,
	DRAW_R_PARTIAL_X_CONFIG3,
	DRAW_R_PARTIAL_Y_CONFIG3,
	DRAW_R_PARTIAL_YUV_CONFIG4,
	DRAW_R_PARTIAL_X_CONFIG4,
	DRAW_R_PARTIAL_Y_CONFIG4,
	DRAW_R_PARTIAL_YUV_CONFIG5,
	DRAW_R_PARTIAL_X_CONFIG5,
	DRAW_R_PARTIAL_Y_CONFIG5,
	DRAW_R_PARTIAL_YUV_CONFIG6,
	DRAW_R_PARTIAL_X_CONFIG6,
	DRAW_R_PARTIAL_Y_CONFIG6,
	DRAW_R_PARTIAL_YUV_CONFIG7,
	DRAW_R_PARTIAL_X_CONFIG7,
	DRAW_R_PARTIAL_Y_CONFIG7,
	DRAW_R_PARTIAL_YUV_CONFIG8,
	DRAW_R_PARTIAL_X_CONFIG8,
	DRAW_R_PARTIAL_Y_CONFIG8,
	DRAW_R_PARTIAL_YUV_CONFIG9,
	DRAW_R_PARTIAL_X_CONFIG9,
	DRAW_R_PARTIAL_Y_CONFIG9,
	DRAW_R_PARTIAL_YUV_CONFIGA,
	DRAW_R_PARTIAL_X_CONFIGA,
	DRAW_R_PARTIAL_Y_CONFIGA,
	DRAW_R_PARTIAL_YUV_CONFIGB,
	DRAW_R_PARTIAL_X_CONFIGB,
	DRAW_R_PARTIAL_Y_CONFIGB,
	DRAW_R_PARTIAL_YUV_CONFIGC,
	DRAW_R_PARTIAL_X_CONFIGC,
	DRAW_R_PARTIAL_Y_CONFIGC,
	DRAW_R_PARTIAL_YUV_CONFIGD,
	DRAW_R_PARTIAL_X_CONFIGD,
	DRAW_R_PARTIAL_Y_CONFIGD,
	DRAW_R_PARTIAL_YUV_CONFIGE,
	DRAW_R_PARTIAL_X_CONFIGE,
	DRAW_R_PARTIAL_Y_CONFIGE,
	DRAW_R_PARTIAL_YUV_CONFIGF,
	DRAW_R_PARTIAL_X_CONFIGF,
	DRAW_R_PARTIAL_Y_CONFIGF,
	DRAW_R_MISC,
	DRAW_REG_CNT,
};

static struct bl_reg osd_draw_regs[DRAW_REG_CNT] = {
	{0x0000, "DRAW_PARTIAL_CONFIG"},
	{0x0004, "DRAW_PARTIAL_YUV_CONFIG0"},
	{0x0008, "DRAW_PARTIAL_X_CONFIG0"},
	{0x000C, "DRAW_PARTIAL_Y_CONFIG0"},
	{0x0010, "DRAW_PARTIAL_YUV_CONFIG1"},
	{0x0014, "DRAW_PARTIAL_X_CONFIG1"},
	{0x0018, "DRAW_PARTIAL_Y_CONFIG1"},
	{0x001C, "DRAW_PARTIAL_YUV_CONFIG2"},
	{0x0020, "DRAW_PARTIAL_X_CONFIG2"},
	{0x0024, "DRAW_PARTIAL_Y_CONFIG2"},
	{0x0028, "DRAW_PARTIAL_YUV_CONFIG3"},
	{0x002C, "DRAW_PARTIAL_X_CONFIG3"},
	{0x0030, "DRAW_PARTIAL_Y_CONFIG3"},
	{0x0034, "DRAW_PARTIAL_YUV_CONFIG4"},
	{0x0038, "DRAW_PARTIAL_X_CONFIG4"},
	{0x003C, "DRAW_PARTIAL_Y_CONFIG4"},
	{0x0040, "DRAW_PARTIAL_YUV_CONFIG5"},
	{0x0044, "DRAW_PARTIAL_X_CONFIG5"},
	{0x0048, "DRAW_PARTIAL_Y_CONFIG5"},
	{0x004C, "DRAW_PARTIAL_YUV_CONFIG6"},
	{0x0050, "DRAW_PARTIAL_X_CONFIG6"},
	{0x0054, "DRAW_PARTIAL_Y_CONFIG6"},
	{0x0058, "DRAW_PARTIAL_YUV_CONFIG7"},
	{0x005C, "DRAW_PARTIAL_X_CONFIG7"},
	{0x0060, "DRAW_PARTIAL_Y_CONFIG7"},
	{0x0064, "DRAW_PARTIAL_YUV_CONFIG8"},
	{0x0068, "DRAW_PARTIAL_X_CONFIG8"},
	{0x006C, "DRAW_PARTIAL_Y_CONFIG8"},
	{0x0070, "DRAW_PARTIAL_YUV_CONFIG9"},
	{0x0074, "DRAW_PARTIAL_X_CONFIG9"},
	{0x0078, "DRAW_PARTIAL_Y_CONFIG9"},
	{0x007C, "DRAW_PARTIAL_YUV_CONFIGA"},
	{0x0080, "DRAW_PARTIAL_X_CONFIGA"},
	{0x0084, "DRAW_PARTIAL_Y_CONFIGA"},
	{0x0088, "DRAW_PARTIAL_YUV_CONFIGB"},
	{0x008C, "DRAW_PARTIAL_X_CONFIGB"},
	{0x0090, "DRAW_PARTIAL_Y_CONFIGB"},
	{0x0094, "DRAW_PARTIAL_YUV_CONFIGC"},
	{0x0098, "DRAW_PARTIAL_X_CONFIGC"},
	{0x009C, "DRAW_PARTIAL_Y_CONFIGC"},
	{0x00A0, "DRAW_PARTIAL_YUV_CONFIGD"},
	{0x00A4, "DRAW_PARTIAL_X_CONFIGD"},
	{0x00A8, "DRAW_PARTIAL_Y_CONFIGD"},
	{0x00AC, "DRAW_PARTIAL_YUV_CONFIGE"},
	{0x00B0, "DRAW_PARTIAL_X_CONFIGE"},
	{0x00B4, "DRAW_PARTIAL_Y_CONFIGE"},
	{0x00B8, "DRAW_PARTIAL_YUV_CONFIGF"},
	{0x00BC, "DRAW_PARTIAL_X_CONFIGF"},
	{0x00C0, "DRAW_PARTIAL_Y_CONFIGF"},
	{0x00FC, "DRAW_MISC"},
};

enum osd_draw_field_name {
	REG_DRAW_F_TYPE,
	REG_DRAW_F_EN,
	REG_DRAW_F_Y,
	REG_DRAW_F_U,
	REG_DRAW_F_V,
	REG_DRAW_F_TH,
	REG_DRAW_F_X_MAX,
	REG_DRAW_F_X_MIN,
	REG_DRAW_F_Y_MAX,
	REG_DRAW_F_Y_MIN,
	REG_OSD_F_PCLK_FORCE_ON_W,
	STS_OSD_F_AXI_IDLE_R,
	STS_OSD_F_L3_CMD_IDLE_R,
	STS_OSD_F_L2_CMD_IDLE_R,
	STS_OSD_F_L1_CMD_IDLE_R,
	STS_OSD_F_L0_CMD_IDLE_R,
	REG_OSD_F_OSTD_MAX_W,
	REG_OSD_F_CH_QOS_W,
	REG_OSD_F_BUS_STRT_W,
	DRAW_FIELD_CNT,
};

static struct bl_field osd_draw_fields[DRAW_FIELD_CNT] = {
	// field_name, start_bit, bit_width, type, default_value
	{"REG_DRAW_TYPE_L", 16, 16, RW, 0},
	{"REG_DRAW_EN_L", 0, 16, RW, 0},
	{"REG_DRAW_Y", 24, 8, RW, 0},
	{"REG_DRAW_U", 16, 8, RW, 0},
	{"REG_DRAW_V", 8, 8, RW, 0},
	{"REG_DRAW_TH", 0, 8, RW, 0},
	{"REG_DRAW_X_MAX", 16, 11, RW, 0},
	{"REG_DRAW_X_MIN", 0, 11, RW, 0},
	{"REG_DRAW_Y_MAX", 16, 11, RW, 0},
	{"REG_DRAW_Y_MIN", 0, 11, RW, 0},
	{"REG_OSD_PCLK_FORCE_ON_W", 24, 0, RW, 0},
	{"STS_OSD_AXI_IDLE_R", 20, 1, RO, 0},
	{"STS_OSD_L3_CMD_IDLE_R", 19, 1, RO, 0},
	{"STS_OSD_L2_CMD_IDLE_R", 18, 1, RO, 0},
	{"STS_OSD_L1_CMD_IDLE_R", 17, 1, RO, 0},
	{"STS_OSD_L0_CMD_IDLE_R", 16, 1, RO, 0},
	{"REG_OSD_OSTD_MAX_W", 8, 2, RW, 0},
	{"REG_OSD_CH_QOS_W", 4, 4, RW, 0},
	{"REG_OSD_BUS_STRT_W", 0, 1, W1P, 0},
};

enum osd_probe_reg_name {
	OSD_PB_R_CTRL_REG,
	OSD_PB_R_RESULT0,
	OSD_PB_R_RESULT1,
	OSD_PB_R_ADDR_00,
	OSD_PB_R_ADDR_01,
	OSD_PB_R_ADDR_02,
	OSD_PB_R_ADDR_03,
	OSD_PB_R_ADDR_04,
	OSD_PB_R_ADDR_05,
	OSD_PB_R_ADDR_06,
	OSD_PB_R_ADDR_07,
	OSD_PB_R_ADDR_08,
	OSD_PB_R_ADDR_09,
	OSD_PB_R_ADDR_0A,
	OSD_PB_R_ADDR_0B,
	OSD_PB_R_ADDR_0C,
	OSD_PB_R_ADDR_0D,
	OSD_PB_R_ADDR_0E,
	OSD_PB_R_ADDR_0F,
	OSD_PB_R_ADDR_10,
	OSD_PB_R_ADDR_11,
	OSD_PB_R_ADDR_12,
	OSD_PB_R_ADDR_13,
	OSD_PB_R_ADDR_14,
	OSD_PB_R_ADDR_15,
	OSD_PB_R_ADDR_16,
	OSD_PB_R_ADDR_17,
	OSD_PB_R_ADDR_18,
	OSD_PB_R_ADDR_19,
	OSD_PB_R_ADDR_1A,
	OSD_PB_R_ADDR_1B,
	OSD_PB_R_ADDR_1C,
	OSD_PB_R_ADDR_1D,
	OSD_PB_R_ADDR_1E,
	OSD_PB_R_ADDR_1F,
	OSD_PB_REG_CNT,
};

static struct bl_reg osd_probe_regs[OSD_PB_REG_CNT] = {
	{0X0000, "OSD_PB_CTRL_REG"},
	{0X0004, "OSD_PB_RESULT0"},
	{0X0008, "OSD_PB_RESULT1"},
	{0X0010, "OSD_PB_ADDR_00"},
	{0X0014, "OSD_PB_ADDR_01"},
	{0X0018, "OSD_PB_ADDR_02"},
	{0X001C, "OSD_PB_ADDR_03"},
	{0X0020, "OSD_PB_ADDR_04"},
	{0X0024, "OSD_PB_ADDR_05"},
	{0X0028, "OSD_PB_ADDR_06"},
	{0X002C, "OSD_PB_ADDR_07"},
	{0X0030, "OSD_PB_ADDR_08"},
	{0X0034, "OSD_PB_ADDR_09"},
	{0X0038, "OSD_PB_ADDR_0A"},
	{0X003C, "OSD_PB_ADDR_0B"},
	{0X0040, "OSD_PB_ADDR_0C"},
	{0X0044, "OSD_PB_ADDR_0D"},
	{0X0048, "OSD_PB_ADDR_0E"},
	{0X004C, "OSD_PB_ADDR_0F"},
	{0X0050, "OSD_PB_ADDR_10"},
	{0X0054, "OSD_PB_ADDR_11"},
	{0X0058, "OSD_PB_ADDR_12"},
	{0X005C, "OSD_PB_ADDR_13"},
	{0X0060, "OSD_PB_ADDR_14"},
	{0X0064, "OSD_PB_ADDR_15"},
	{0X0068, "OSD_PB_ADDR_16"},
	{0X006C, "OSD_PB_ADDR_17"},
	{0X0070, "OSD_PB_ADDR_18"},
	{0X0074, "OSD_PB_ADDR_19"},
	{0X0078, "OSD_PB_ADDR_1A"},
	{0X007C, "OSD_PB_ADDR_1B"},
	{0X0080, "OSD_PB_ADDR_1C"},
	{0X0084, "OSD_PB_ADDR_1D"},
	{0X0088, "OSD_PB_ADDR_1E"},
	{0X008C, "OSD_PB_ADDR_1F"},
};

enum osd_probe_field_name {
	STS_OSD_PB_F_IDX_R,
	STS_OSD_PB_F_W_CNT_R,
	REG_OSD_PB_F_LUMA_TH,
	STS_OSD_PB_F_RESULT_R,
	REG_OSD_PB_F_Y,
	REG_OSD_PB_F_X,
	OSD_PB_FIELD_CNT,
};

static struct bl_field osd_probe_fields[OSD_PB_FIELD_CNT] = {
	/* field_name, start_bit, bit_width, type, default_value */
	{"STS_OSD_PB_IDX_R", 15, 1, RO, 0},
	{"STS_OSD_PB_W_CNT_R", 8, 5, RO, 0},
	{"REG_OSD_PB_LUMA_TH", 0, 8, RW, 0},
	{"STS_OSD_PB_RESULT_R", 0, 32, RO, 0},
	{"REG_OSD_PB_Y", 16, 11, RW, 0},
	{"REG_OSD_PB_X", 0, 11, RW, 0},
};

#endif
